# ######################################################################
# Copyright (c) 2014, Brookhaven Science Associates, Brookhaven        #
# National Laboratory. All rights reserved.                            #
#                                                                      #
# Redistribution and use in source and binary forms, with or without   #
# modification, are permitted provided that the following conditions   #
# are met:                                                             #
#                                                                      #
# * Redistributions of source code must retain the above copyright     #
#   notice, this list of conditions and the following disclaimer.      #
#                                                                      #
# * Redistributions in binary form must reproduce the above copyright  #
#   notice this list of conditions and the following disclaimer in     #
#   the documentation and/or other materials provided with the         #
#   distribution.                                                      #
#                                                                      #
# * Neither the name of the Brookhaven Science Associates, Brookhaven  #
#   National Laboratory nor the names of its contributors may be used  #
#   to endorse or promote products derived from this software without  #
#   specific prior written permission.                                 #
#                                                                      #
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  #
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT    #
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS    #
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE       #
# COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,           #
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES   #
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR   #
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)   #
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  #
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OTHERWISE) ARISING   #
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   #
# POSSIBILITY OF SUCH DAMAGE.                                          #
########################################################################
from __future__ import absolute_import
__author__ = 'Li Li'

from enaml.widgets.api import (Container, PushButton, Label,
                               Form, Field, FileDialogEx, DockItem,
                               DockArea, MPLCanvas, CheckBox, Menu, Action,
                               ComboBox, Window, RadioButton)
from enaml.layout.api import hbox, vbox, HSplitLayout, VSplitLayout, spacer
from enaml.stdlib.fields import FloatField as DefaultFloatField
from atom.api import *
from ..model.lineplot import LinePlotModel

import numpy as np

from matplotlib.figure import Figure
from skbeam.core.fitting.xrf_model import (K_LINE, L_LINE, M_LINE)


enamldef FloatField(DefaultFloatField):
    submit_triggers = ['auto_sync']

#class AdjustEmissionLineModel(Atom):
#    plot_model = Typed(LinePlotModel)


enamldef SampleAction(Action):
    text = '%s action %d' % (parent.title, parent.children.index(self))
    triggered :: 
        print(text)


enamldef SampleMenu(Menu):
    SampleAction: pass
    SampleAction: pass
    SampleAction: pass
    Container:
        Form:
            Label:
                text = 'Energy'
            FloatField:
                value = 10.


enamldef PlotMain(DockItem):
    # attr io_model
    attr plot_model
    attr param_model
    attr adjust_emission_line
    Container:
        constraints = [
            vbox(
                hbox(plot_exp_btn, pb_plot_fit, spacer),
                hbox(cbox1, spacer, pb_eline, cbox2, checkb),
                canvas,
            ),
        ]
        #ComboBox: data_choose:
        #    items = ['file1', 'file2']
        ComboBox: cbox1:
            items = ['LinLog', 'Linear']
            index >> plot_model.scale_opt
            index = 0
        PushButton: pb_eline:
            text = 'Options'
            checkable = True
            tool_tip = 'Set up energy to calculate emission lines.'
            checked := adjust_emission_line.visible
            clicked ::
                if checked:
                    adjust_emission_line.show()
                else:
                    adjust_emission_line.hide()

        ComboBox: cbox2:
            items = ['<Display emission lines>'] +\
                    K_LINE + L_LINE + M_LINE
            index := plot_model.element_id
            index = 0

        #PushButton: plot_bt:
        #    text = 'Plot Multi. Exp. Data'
        #    #maximum_size = 100
        #    #enabled = True
        #    checkable = True
        #    clicked ::
        #        #plot_model.data_sets = io_model.data_sets
        #        plot_model.plot_multi_exp_data()
        #        if checked:
        #            plot_bt.text = 'Remove Plot'
        #            plot_model.show_exp_opt = True
        #        else:
        #            plot_model.show_exp_opt = False
        #            plot_bt.text = 'Plot Experiments'

        PushButton: plot_exp_btn:
            text = 'Plot Selected Exp. Data'
            checkable = True
            checked << plot_model.plot_exp_opt
            clicked ::
                if checked:
                    plot_model.plot_experiment()
                    plot_model.plot_exp_opt = True
                    #plot_exp_btn.text = 'Hide Selected Exp. Data'
                else:
                    plot_model.plot_exp_opt = False
                    #plot_exp_btn.text = 'Plot Selected Exp. Data'

        #PushButton: select_all:
        #    text = 'Plot Auto Fit Result'
        #    #maximum_size = 30
        #    minimum_size = (30, 20)
        #    checked << plot_model.show_autofit_opt
        #    checkable = True
        #    clicked ::
        #        if checked:
        #            param_model.EC.turn_on_all()
        #            param_model.data_for_plot()
        #            plot_model.set_prefit_data_and_plot(param_model.prefit_x, param_model.total_y,
        #                                                param_model.total_l, param_model.total_m,
        #                                                param_model.total_pileup)
        #            plot_model.show_autofit_opt = True
        #            plot_model._fig.canvas.draw()
        #            select_all.text = 'Hide Auto Fit Result'
        #        else:
        #            param_model.EC.turn_on_all(option=False)
        #            param_model.data_for_plot()
        #            plot_model.set_prefit_data_and_plot(param_model.prefit_x, param_model.total_y,
        #                                                param_model.total_l, param_model.total_m,
        #                                                param_model.total_pileup)
        #            plot_model.show_autofit_opt = False
        #            plot_model._fig.canvas.draw()
        #            select_all.text = 'Plot Auto Fit Result'

        PushButton: pb_plot_fit:
            text = 'Plot Fit Result'
            checkable = True
            checked << plot_model.show_fit_opt
            minimum_size = (200, 20)
            clicked ::
                if checked:
                    plot_model.show_fit_opt = True
                    #pb_plot_fit.text = 'Hide Fit Result'
                else:
                    plot_model.show_fit_opt = False
                    #pb_plot_fit.text = 'Plot Fit Result'

        #PushButton: pbn:
        #    text = 'Plot Experiment Data'
        #    checkable = True
        #    clicked ::
        #        if checked:
        #            #plot_model.plot_title = io_model.file_name
        #            #plot_model.data = io_model.data
        #            plot_model.parameters = param_model.parameters
        #            plot_model.incident_energy = param_model.parameters['coherent_sct_energy'].value
        #            plot_model.plot_experiment()
        #            plot_model.plot_exp_opt = True
        #        else:
        #            plot_model.plot_exp_opt = False
        CheckBox: checkb:
            text = 'Toolbar Visible'
            checked := canvas.toolbar_visible
        MPLCanvas: canvas:
            figure << plot_model._fig
            #figures[cbox.selected_item]


enamldef AdjustEmissionLine(Window): emission_win:
    attr plot_model
    title = ' '
    Container:
        constraints = [
            vbox(
                hbox(elbl, fd, spacer),
                hbox(lbl_escape, cb_option, cb_materials),
                )
        ]
        Label: elbl:
            text = 'Energy'
        FloatField: fd:
            value := plot_model.incident_energy
        Label: lbl_escape:
            text = 'Plot escape peak'
        ComboBox: cb_option:
            items = ['No', 'Yes']
            index := plot_model.plot_escape_line
        ComboBox: cb_materials:
            items = ['Si', 'Ge']
            index := plot_model.det_materials
            index = 0
        #PushButton: btn_close:
        #    text = 'Close'
        #    clicked ::
        #        emission_win.close()
        #        plot_m.emission_line_window = True
